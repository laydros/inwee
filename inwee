#!/bin/sh

# The MIT License (MIT)
#
# Copyright (c) 2015-2016 Susam Pal
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
# IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
# TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


VERSION=0.1.0

COPYRIGHT="Copyright (c) 2015-2016 Susam Pal"

LICENSE_URL="http://susam.in/licenses/mit/"
SUPPORT_URL="https://github.com/susam/inwee/issues"

NOTICE="
This is free and open source software. You can use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of it,
under the terms of the MIT License. You can obtain a copy of the
MIT License at <$LICENSE_URL>.

This software is provided \"AS IS\", WITHOUT WARRANTY OF ANY KIND,
express or implied. See the MIT License for details."

NAME=${0##*/}


# Starting point of this script.
#
# Arguments:
#   arg...: All arguments this script was invoked with
main()
{
    parse_arguments "$@"

    # Find FIFO path via the -fp|--fifo-path argument.
    if [ -e "$fifo_path" ]; then
        debug_output "Found FIFO socket on custom argument."
        fifo="$fifo_path"
    else
        debug_output "Could not find FIFO socket on custom argument."
    fi

    # Find FIFO pipe via the PID method.
    for f in ~/.weechat/weechat_fifo_*
    do
        if [ "$f" != ~/.weechat/weechat_fifo_"*" ]; then
            fifo="$f"
            break
        else
            debug_output "Could not find FIFO socket via PID method."
        fi
    done

    # If we still don't have the FIFO path, then we should try it with
    # the default path for Weechat 1.7.
    if [ -z "$fifo" ]; then
        if [ -e "$HOME/.weechat/weechat_fifo" ]; then
            debug_output "Found FIFO socket via Weechat 1.7 default path."
            fifo="$HOME/.weechat/weechat_fifo"
        else
            debug_output "Could not find FIFO socket via Weechat 1.7 default path."
        fi
    fi

    if [ -z "$fifo" ]; then
        quit Could not find Weechat FIFO pipe.
    fi

    debug_output FIFO: "$fifo"

    # Read from standard input if input file is not specified.
    if [ -z "$input_file" ]
    then
        input_file=-
    fi

    # Skip comments and lines consisting only of whitespaces and feed
    # the remaining lines to WeeChat's FIFO.
    grep -v "^[[:space:]]*#" "$input_file" | grep "[[:graph:]]" |
    while read -r line
    do
        debug_output READ: "$line"

        line="*$line"
        if [ -n "$buffer" ]
        then
            line="$buffer $line"
        fi
        printf "%s\n" "$line" > "$fifo"

        debug_output SENT: "$line"
    done
}


# Parse command line arguments passed to this script.
#
# Arguments:
#   arg...: All arguments this script was invoked with
#
# Errors:
#   If invalid arguments are specified, this function causes the script
#   to exit with an error.
parse_arguments()
{
    while [ "$#" -gt 0 ]
    do
        case $1 in
            -b | --buffer)
                [ -n "$2" ] || quit \""$1"\" must be followed by buffer name.
                buffer="$2"
                shift 2
                ;;
            -fp | --fifo-path)
                [ -n "$2" ] || quit \""$1"\" must be followed by a path to the FIFO socket.
                fifo_path="$2"
                ;;
            -d | --debug)
                debug=yes
                shift
                ;;
            -h | --help)
                show_help
                exit
                ;;
            -v | --version)
                show_version
                exit
                ;;
            -?*)
                quit Unknown option \""$1"\".
                ;;
            *)
                if [ -z "$input_file" ]
                then
                    input_file="$1"
                    shift
                else
                    quit Surplus argument \""$1"\".
                fi
        esac
    done
}


# Output message only in debug mode.
#
# Arguments:
#   string...: String to print to standard output stream.
debug_output()
{
    if [ "$debug" = "yes" ]
    then
        printf "%s\n" "$*"
    fi
}


# Terminate the script with an error message.
#
# Arguments:
#   string...: String to print to standard error stream.
#
# Errors:
#   Unconditionally cause the script to terminate with an error message
#   and exit code 1.
quit()
{
    printf "%s: %s\n" "$NAME" "$*" >&2
    exit 1
}


# Show help.
show_help()
{
    printf "%s\n" \
"Usage: $NAME [-b BUFFER] [-d] [-c] [-h] [-v] [FILE]

Read text or commands from standard input, FILE or from the output of a
shell command, and send it to WeeChat's FIFO pipe. If FILE is not
specified or if it is specified as '-', i.e. a hyphen, then text and
commands are read from standard input.

Options:
  -b, --buffer BUFFER   Buffer to send text or command to.
  -fp, --fifo-path PATH FIFO Path to send commands to.
  -d, --debug           Show diagnostic information.
  -h, --help            Show this help and exit.
  -v, --version         Show version and exit.

Report bugs to <$SUPPORT_URL>."
}


# Show version and copyright.
show_version()
{
    printf "%s %s\n%s\n%s\n" "$NAME" "$VERSION" "$COPYRIGHT" "$NOTICE"
}


# Start.
main "$@"
